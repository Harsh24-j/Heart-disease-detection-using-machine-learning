# -*- coding: utf-8 -*-
"""Heart Disease Prediction using Machine Learning with Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JAeZjl5dKpATqRahU01fSJVZwKYgM9sj
"""



"""Importing the dependencies

"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and Processing"""

#loading the csv data to a pandas dataframe
heart_data = pd.read_csv('/content/heart.csv')

#print first 5 rows of the dataset
heart_data.head()

#print last 5 rows of the dataset
heart_data.tail()

# number of rows and columns in the dataset
heart_data.shape

# getting some info about the dataset
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

# checking the distribution of target variable
heart_data['target'].value_counts()

"""1 --> Defective Heart
0--> Healthy Heart

 Splitting the features and target
"""

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting the data into training data and test data

"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, stratify=Y, random_state=3 )

print(X.shape, X_train.shape, X_test.shape)

"""Model training

logistic regression


"""

model = LogisticRegression()

# training the logistic regression model with training data
model.fit(X_train, Y_train)

# accuarcy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy= accuracy_score(X_train_prediction, Y_train)

"""model evaluation

accuarcy score
"""

print("Accuracy on Training Data : ", training_data_accuracy)

# accuarcy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy= accuracy_score(X_test_prediction, Y_test)

print("Accuracy on Test Data : ", test_data_accuracy)

"""Building a Predictive System"""

input_data = (58,0,0,100,248,0,0,122,0,1,1,0,2)
# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The person does not have a heart disease')
else:
  print('The person has heart disease')